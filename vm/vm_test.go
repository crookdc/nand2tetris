package vm

import (
	"reflect"
	"strings"
	"testing"
)

func TestEvaluate(t *testing.T) {
	tests := []struct {
		src      string
		expected []string
		ok       bool
	}{
		{
			src: "push constant 0",
			expected: []string{
				"@0",
				"D=A",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push constant 24565",
			expected: []string{
				"@24565",
				"D=A",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push constant -256",
			ok:  false,
		},
		{
			src: "push constant 32769",
			ok:  false,
		},
		{
			src: "push local 17",
			expected: []string{
				"@LCL",
				"D=M",
				"@17",
				"A=D+A",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push local 0",
			expected: []string{
				"@LCL",
				"D=M",
				"@0",
				"A=D+A",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push local -1",
			ok:  false,
		},
		{
			src: "push argument 110",
			expected: []string{
				"@ARG",
				"D=M",
				"@110",
				"A=D+A",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push argument 0",
			expected: []string{
				"@ARG",
				"D=M",
				"@0",
				"A=D+A",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push argument -1",
			ok:  false,
		},
		{
			src: "push this 110",
			expected: []string{
				"@THIS",
				"D=M",
				"@110",
				"A=D+A",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push this 0",
			expected: []string{
				"@THIS",
				"D=M",
				"@0",
				"A=D+A",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push this -1",
			ok:  false,
		},
		{
			src: "push that 110",
			expected: []string{
				"@THAT",
				"D=M",
				"@110",
				"A=D+A",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push that 0",
			expected: []string{
				"@THAT",
				"D=M",
				"@0",
				"A=D+A",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push that -1",
			ok:  false,
		},
		{
			src: "push temp 3",
			expected: []string{
				"@8",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push temp 0",
			expected: []string{
				"@5",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "push temp -1",
			ok:  false,
		},
		{
			src: "pop local 17",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@LCL",
				"D=D+M",
				"@17",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop local 0",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@LCL",
				"D=D+M",
				"@0",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop local -1",
			ok:  false,
		},
		{
			src: "pop argument 0",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@ARG",
				"D=D+M",
				"@0",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop argument 15",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@ARG",
				"D=D+M",
				"@15",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop argument -1",
			ok:  false,
		},
		{
			src: "pop this 110",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@THIS",
				"D=D+M",
				"@110",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop this 0",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@THIS",
				"D=D+M",
				"@0",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop this -1",
			ok:  false,
		},
		{
			src: "pop that 110",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@THAT",
				"D=D+M",
				"@110",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop that 0",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@THAT",
				"D=D+M",
				"@0",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop that -1",
			ok:  false,
		},
		{
			src: "pop temp 3",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@8",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop temp 0",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@5",
				"D=D+A",
				"@SP",
				"A=M",
				"A=M",
				"A=D-A",
				"M=D-A",
			},
			ok: true,
		},
		{
			src: "pop temp -1",
			ok:  false,
		},
		{
			src: "add",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@SP",
				"AM=M-1",
				"D=D+M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "sub",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@SP",
				"AM=M-1",
				"D=M-D",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "neg",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=-M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "and",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@SP",
				"AM=M-1",
				"D=D&M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "or",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@SP",
				"AM=M-1",
				"D=D|M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "not",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=!M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "eq",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@SP",
				"AM=M-1",
				"D=M-D",
				"@true_1",
				"D;JEQ",
				"D=0",
				"@end_1",
				"0;JMP",
				"(true_1)",
				"D=-1",
				"(end_1)",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "lt",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@SP",
				"AM=M-1",
				"D=M-D",
				"@true_1",
				"D;JLT",
				"D=0",
				"@end_1",
				"0;JMP",
				"(true_1)",
				"D=-1",
				"(end_1)",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: "gt",
			expected: []string{
				"@SP",
				"AM=M-1",
				"D=M",
				"@SP",
				"AM=M-1",
				"D=M-D",
				"@true_1",
				"D;JGT",
				"D=0",
				"@end_1",
				"0;JMP",
				"(true_1)",
				"D=-1",
				"(end_1)",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: `
		function Main 0
			push constant 10
			call Main.Pow 1
			return
		`,
			expected: []string{
				"(Main.Main)",
				// push constant 10
				"@10",
				"D=A",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
				// call Main.Pow 1
				"@Main.Main$ret1",
				"D=A",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",

				"@LCL",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",

				"@ARG",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",

				"@THIS",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",

				"@THAT",
				"D=M",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",

				"@SP",
				"D=M",
				"@LCL",
				"M=D",

				"@SP",
				"D=M",
				"@6",
				"D=D-A",
				"@ARG",
				"M=D",

				"@Main.Pow",
				"0;JMP",
				"(Main.Main.ret$1)",

				// return
				"@LCL",
				"D=M",
				"@R13",
				"M=D",
				"@5",
				"D=D-A",
				"@R14",
				"M=D",
				"@SP",
				"AM=M-1",
				"D=M",
				"@ARG",
				"A=M",
				"M=D",
				"@ARG",
				"D=M",
				"@SP",
				"M=D+1",
				"@R13",
				"A=M-1",
				"D=M",
				"@THAT",
				"M=D",
				"@R13",
				"D=M",
				"@2",
				"D=D-A",
				"A=D",
				"D=M",
				"@THIS",
				"M=D",
				"@R13",
				"D=M",
				"@3",
				"D=D-A",
				"A=D",
				"D=M",
				"@ARG",
				"M=D",
				"@R13",
				"D=M",
				"@4",
				"D=D-A",
				"A=D",
				"D=M",
				"@LCL",
				"M=D",
				"@R14",
				"0;JMP",
			},
			ok: true,
		},
		{
			src: "function Pow 2",
			expected: []string{
				"(Main.Pow)",
				// First parameter
				"@0",
				"D=A",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
				// Second parameter
				"@0",
				"D=A",
				"@SP",
				"A=M",
				"M=D",
				"@SP",
				"M=M+1",
			},
			ok: true,
		},
		{
			src: `
// This test also covers comments!

// This is a totally useless function that does nothing :-)
function Null 0
	return
`,
			expected: []string{
				"(Main.Null)",
				"@LCL",
				"D=M",
				"@R13",
				"M=D",
				"@5",
				"D=D-A",
				"@R14",
				"M=D",
				"@SP",
				"AM=M-1",
				"D=M",
				"@ARG",
				"A=M",
				"M=D",
				"@ARG",
				"D=M",
				"@SP",
				"M=D+1",
				"@R13",
				"A=M-1",
				"D=M",
				"@THAT",
				"M=D",
				"@R13",
				"D=M",
				"@2",
				"D=D-A",
				"A=D",
				"D=M",
				"@THIS",
				"M=D",
				"@R13",
				"D=M",
				"@3",
				"D=D-A",
				"A=D",
				"D=M",
				"@ARG",
				"M=D",
				"@R13",
				"D=M",
				"@4",
				"D=D-A",
				"A=D",
				"D=M",
				"@LCL",
				"M=D",
				"@R14",
				"0;JMP",
			},
			ok: true,
		},
	}
	for _, test := range tests {
		t.Run(test.src, func(t *testing.T) {
			actual, err := Translate("Main", strings.NewReader(test.src))
			if (err == nil && !test.ok) || (err != nil && test.ok) {
				t.Errorf("expected non-nil error but got %v", err)
			}
			if !reflect.DeepEqual(actual, test.expected) {
				t.Errorf("expected %v but got %v", test.expected, actual)
			}
		})
	}
}
